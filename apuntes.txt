label
Resumen
Proporciona una sentencia con un identificador al que se puede referir al usar las sentencias break o continue.
Por ejemplo, puede usar una etiqueta para identificar un bucle, y entonces usar las sentencias break o continue para indicar si un programa deber√≠a interrumpir el bucle o continuar su ejecuci√≥n.


for 

Resumen
Crea un bucle que consiste en tres expresiones opcionales, encerradas en par√©ntesis y separadas por puntos y comas, seguidas de una sentencia ejecutada en un bucle.

length

Descripci√≥n
length es la propiedad de una funci√≥n objeto, e indica el n√∫mero de argumentos que una funci√≥n requiere, por ejemplo, el n√∫mero de par√°metros formales. Este n√∫mero no incluye rest parameter. En cambio, arguments.length es local a una funci√≥n y aporta el n√∫mero de argumentos actuales pasados a una funci√≥n.


switch

La declaraci√≥n switch eval√∫a una expresi√≥n, comparando el valor de esa expresi√≥n con una instancia case, y ejecuta declaraciones asociadas a ese case, as√≠ como las declaraciones en los case que siguen.


üß† Funciones: estructura y prop√≥sito
Una funci√≥n en JavaScript es un bloque reutilizable de c√≥digo que realiza una tarea espec√≠fica. Su estructura b√°sica es:

javascript
function nombreFuncion(param1, param2) {
  // l√≥gica
  return resultado;
}
Par√°metros de entrada: Son los valores que recibe la funci√≥n para trabajar. Ej: param1, param2.

Valor de salida: Es lo que devuelve la funci√≥n con return. Si no hay return, la funci√≥n devuelve undefined.

Ejemplo pr√°ctico:

javascript
function calcularTotal(precio, cantidad) {
  return precio * cantidad;
}
Entrada: precio, cantidad

Salida: total calculado

üîç Validaciones: protege tu l√≥gica
Antes de ejecutar la l√≥gica principal, valida los datos de entrada. Esto evita errores y mejora la experiencia del usuario.

Ejemplo de validaci√≥n:

javascript
function agregarProducto(nombre, precio) {
  if (!nombre || typeof nombre !== 'string') {
    console.error('Nombre inv√°lido');
    return;
  }
  if (isNaN(precio) || precio <= 0) {
    console.error('Precio inv√°lido');
    return;
  }

  // L√≥gica para agregar el producto
}
üîÅ Bucles for: recorrido controlado
El bucle for es ideal para recorrer arrays o repetir acciones un n√∫mero determinado de veces.

Estructura:

javascript
for (let i = 0; i < array.length; i++) {
  // l√≥gica con array[i]
}
Ejemplo con validaci√≥n dentro del bucle:

javascript
const productos = [
  { nombre: 'Mouse', precio: 25 },
  { nombre: '', precio: -10 },
  { nombre: 'Teclado', precio: 45 }
];

for (let i = 0; i < productos.length; i++) {
  const producto = productos[i];
  if (!producto.nombre || producto.precio <= 0) {
    console.warn(Producto inv√°lido en √≠ndice ${i});
    continue;
  }
  console.log(Producto v√°lido: ${producto.nombre});
}


-----------------------------------------------------------------------------------------------------------------------

üß© 1. Estructura de Datos
Primero, necesitas una estructura para almacenar los productos. Como no se permite usar inteligencia artificial para generar c√≥digo, lo ideal es que t√∫ mismo declares un array de objetos:

js
let productos = [];
Cada producto ser√° un objeto con las propiedades: nombre, descripcion, categoria, precio, stock.

üß™ 2. Validaciones
Debes crear funciones espec√≠ficas para validar cada campo. Por ejemplo:

validarNombre(nombre)

validarDescripcion(descripcion)

validarCategoria(categoria)

validarPrecio(precio)

validarStock(stock)

Cada funci√≥n debe retornar un mensaje de error si el campo es inv√°lido, o null si es v√°lido. Usa expresiones regulares para validar letras, may√∫sculas, decimales, etc.

üß† 3. Guardar o Actualizar Producto
Cuando el usuario presione el bot√≥n ‚ÄúGuardar‚Äù:

Captura los valores de los inputs.

Ejecuta todas las funciones de validaci√≥n.

Si hay errores, mu√©stralos debajo de cada campo usando .error.

Si todo est√° bien:

Busca si el producto ya existe por nombre exacto.

Si existe, actualiza sus propiedades.

Si no, agr√©galo al array productos.

Limpia los campos y los mensajes de error.

üìã 4. Mostrar Productos en la Tabla
Crea una funci√≥n renderizarTabla() que:

Recorra el array productos.

Cree filas con los datos.

Calcule el precio con IVA:

precioConIVA
=
(
precio
‚ãÖ
1.12
)
.
ùë°
ùëú
ùêπ
ùëñ
ùë•
ùëí
ùëë
(
2
)
Inserte las filas en el <tbody> de la tabla.

Esta funci√≥n debe ejecutarse cada vez que se agregue, actualice o elimine un producto.

üóëÔ∏è 5. Eliminar Producto
Crea una funci√≥n eliminarProducto(nombre) que:

Verifique que el campo no est√© vac√≠o.

Busque el producto por nombre exacto (case-sensitive).

Si lo encuentra, lo elimina del array.

Si no, muestra un mensaje de error debajo del campo.

Llama a renderizarTabla() y actualizarEstadisticas().

üìä 6. Estad√≠sticas Din√°micas
Crea una funci√≥n actualizarEstadisticas() que:

Calcule:

Total de productos: productos.length

Total de stock: suma de producto.stock

Valor del inventario: suma de producto.precio * producto.stock

Actualice los elementos HTML correspondientes.

üé® 7. Experiencia Visual
Usa la clase .error para mostrar los mensajes.

Aplica estilos CSS para destacar los errores (bordes rojos, texto en rojo).

Aseg√∫rate de que los mensajes desaparezcan cuando el usuario corrija el campo.